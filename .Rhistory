footnote(symbol = c("Parametric p-values for numeric variables are from Chi-squared tests",
"Non-parametric p-values for numeric variables are from Kruskal-Wallis tests",
"Parametric p-values for categorical variables are from ANOVA",
"Non-parametric p-values for categorical variables are from Fisher's Exact tests")
)
return(k)
}
cat_fun <- function(data, outcome, var, digits = 2) {
data <- FEV
outcome <- "smoke"
var <- "sex"
# 'temp' = contingency table col1 is levels of var, col2 is counts for out1, col3 is
# counts for out2 done first with percents for table output
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
# done a second time with just counts for testing 2x2 contingency table
counts <- data %>%
group_by(!!as.symbol(outcome), !!as.symbol(var)) %>%
tally() %>%
spread(!!as.symbol(outcome), n)
counts <- as.data.frame(counts)
counts[, 2] <- as.numeric(counts[, 2])
counts[, 3] <- as.numeric(counts[, 3])
# store info for output in later table this includes the levels of covariate and
# counts/percents for contingency table length of first column for number of levels
n <- length(counts[, 1])
# store counts for each level in a dictionary with key equal to the level
cat_info <- hash(counts[, 1], counts[, 1])
for (i in 1:n) {
cat_info[[temp[i, 1]]] <- hash(c("out1", "out2"), c(temp[i, 2], temp[i, 3]))
}
# tests of differences chi-square
chisq <- chisq.test(counts[, 2:3])
para_pval <- chisq$p.value
# can use $expected to check if we should use fisher's instead
# Fisher's exact test
fish <- fisher.test(counts[, 2:3])
nonpara_pval <- fish$p.value
return(c(cat_info, para_pval, nonpara_pval))
}
numeric_fun <- function(data, outcome, var) {
# summary stats
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarize(N = n(),
mean = mean(!!as.symbol(var)),
median = median(!!as.symbol(var)))
# tests of differences create formula
frm <- paste(var, outcome, sep = "~")
# aov perform aov and store p-value
test <- aov(formula(frm), data)
sum_test = unlist(summary(test))
para_pval <- sum_test["Pr(>F)1"]
# Kruskal-Wallis non-parametric rank-sum test
test <- kruskal.test(formula(frm), data = data)
sum_test = unlist(test)
nonpara_pval <- as.numeric(sum_test["p.value"])
return(c(num_info, para_pval, nonpara_pval))
}
numeric_fun(data=getHData(FEV), outcome="smoke", var="age")
numeric_fun(data=getHData(FEV), outcome="smoke", var="age")
# summary stats
data=getHdata(FEV)
# summary stats
data<-getHdata(FEV)
outcome="smoke"
var="age"
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarize(N = n(),
mean = mean(!!as.symbol(var)),
median = median(!!as.symbol(var)))
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarize(N = n(), mean = mean(!!as.symbol(var)), median = median(!!as.symbol(var)))
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarize(N = n(), mean = mean(!!as.symbol(var)), median = median(!!as.symbol(var)))
# summary stats
data<-getHdata(FEV)
numeric_fun <- function(data, outcome, var) {
# summary stats
data<-getHdata(FEV)
outcome="smoke"
var="age"
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarize(N = n(), mean = mean(!!as.symbol(var)), median = median(!!as.symbol(var)))
# tests of differences create formula
frm <- paste(var, outcome, sep = "~")
# aov perform aov and store p-value
test <- aov(formula(frm), data)
sum_test = unlist(summary(test))
para_pval <- sum_test["Pr(>F)1"]
# Kruskal-Wallis non-parametric rank-sum test
test <- kruskal.test(formula(frm), data = data)
sum_test = unlist(test)
nonpara_pval <- as.numeric(sum_test["p.value"])
return(c(num_info, para_pval, nonpara_pval))
}
# summary stats
data<-getHdata(FEV)
# summary stats
data<-FEV
outcome="smoke"
var="age"
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarize(N = n(), mean = mean(!!as.symbol(var)), median = median(!!as.symbol(var)))
View(data)
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarize(N = n(), mean = mean(!!as.symbol(var)), median = median(!!as.symbol(var)))
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarise(N = n(), mean = mean(!!as.symbol(var)), median = median(!!as.symbol(var)))
View(num_info)
numeric_fun <- function(data, outcome, var) {
# summary stats
num_info <- data %>%
group_by(!!as.symbol(outcome)) %>%
summarise(N = n(), mean = mean(!!as.symbol(var)), median = median(!!as.symbol(var)))
# tests of differences create formula
frm <- paste(var, outcome, sep = "~")
# aov perform aov and store p-value
test <- aov(formula(frm), data)
sum_test = unlist(summary(test))
para_pval <- sum_test["Pr(>F)1"]
# Kruskal-Wallis non-parametric rank-sum test
test <- kruskal.test(formula(frm), data = data)
sum_test = unlist(test)
nonpara_pval <- as.numeric(sum_test["p.value"])
return(c(num_info, para_pval, nonpara_pval))
}
numeric_fun(data=getHData(FEV), outcome="smoke", var="age")
numeric_fun(data=FEV, outcome="smoke", var="age")
#example with FEV data set
make_table(data=getHdata(FEV),
outcome="smoke",
num_vec=c("age", "height", "fev"),
cat_vec="sex")
#example with FEV data set
data<- getHdata(FEV)
library(Hmisc)
#example with FEV data set
data<- getHdata(FEV)
library(Hmisc)
getHdata(titanic3)
getHdata(FEV)
numeric_fun(data=FEV, outcome="smoke", var="age")
#example with FEV data set
make_table(data=FEV,
outcome="smoke",
num_vec=c("age", "height", "fev"),
cat_vec="sex")
setwd(WD2)
use_package('tidyverse')
usethis::use_package('tidyverse')
usethis::use_package('dplyr')
usethis::use_package('knitr')
usethis::use_package('hash')
usethis::use_package('HMisc')
usethis::use_package('Hmisc')
usethis::use_package('KableExtra')
usethis::use_package('kableExtra')
devtools::document()
devtools::document()
use_mit_license()
usethis::use_mit_license()
devtools::document()
devtools::document()
Authors@R:
c(person(given = "Christine",
family = "Rakowski",
role = c("aut", "cre"),
email = "crakowski1@ufl.edu")
)
devtools::install(build_vignettes = TRUE)
# need to udpate this ti github download
install.packages(file.path("~/Desktop","Table1PKG_0.0.0.9000.tar.gz"),repos=NULL,type="source")
# need to udpate this ti github download
install.packages(file.path("~/Desktop/Table1PKG","Table1PKG_0.0.0.9000.tar.gz"),repos=NULL,type="source")
library(Table1PKG)
help(Table1PKG)
help(package="Table1PKG")
?FEV
FEV
getHdata(FEV)
FEV %>% group_by(smoke)
FEV %>% group_by(smoke) %>%
summarise(mean(age))
FEV %>% group_by(smoke) %>%
summarise(median(age))
FEV %>% group_by(smoke) %>%
summarise(n(age))
summarise(n()
FEV %>% group_by(smoke) %>%
FEV %>% group_by(smoke) %>%
summarise(n=n())
devtools::test()
devtools::test()
library(Table1PKG)
FEV
data(FEV)
?Table1PKG
??Table1PKG
help(package="Table1PKG")
library(Table1PKG)
FEV
help(package="Table1PKG")
devtools::idocument()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
library(Table1PKG)
FEV
load("/Users/Christine/Desktop/Table1PKG/data/FEV.rda")
# step 6
#usethis::use_data() prepare external data
getHdata(FEV)
usethis::use_data(FEV)
usethis::use_data(FEV)
usethis::use_data(FEV, overwrite=TRUE)
devtools::document()
devtools::install(build_vignettes = TRUE)
load("/Users/Christine/Desktop/Table1PKG/data/FEV.rda")
library(Table1PKG)
FEV
devtools::test()
devtools::test()
numeric_fun(data=FEV, outcome="smoke", var="age")
numeric_fun(data=FEV, outcome="smoke", var="age")[1]
numeric_fun(data=FEV, outcome="smoke", var="age")$mean
data(FEV)
devtools::test()
devtools::test()
devtools::test()
numeric_fun(data=FEV, outcome="smoke", var="age")[6]
devtools::test()
numeric_fun(data=FEV, outcome="smoke", var="age")[6]
numeric_fun(data=FEV, outcome="smoke", var="age")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
cat_fun(data=FEV, outcome="smoke", var="sex")
cat_fun(data=FEV, outcome="smoke", var="sex")
devtools::document()
devtools::install(build_vignettes = TRUE)
cat_fun(data=FEV, outcome="smoke", var="sex")
devtools::document()
devtools::install(build_vignettes = TRUE)
cat_fun(data=FEV, outcome="smoke", var="sex")
cat_fun <- function(data, outcome, var, digits = 2) {
# 'counts' = contingency table; col2 is for outcome level 1, col3 is for outcome level 2
# `counts_wpercent` includes percents
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
# done a second time with just counts for testing 2x2 contingency table
counts <- data %>%
group_by(!!as.symbol(outcome), !!as.symbol(var)) %>%
tally() %>%
spread(!!as.symbol(outcome), n)
counts <- as.data.frame(counts)
counts[, 2] <- as.numeric(counts[, 2])
counts[, 3] <- as.numeric(counts[, 3])
# store info for output in later table this includes the levels of covariate and
# counts/percents for contingency table length of first column for number of levels
n <- length(counts[, 1])
# store counts/percent for each level in a dictionary with key equal to the level
cat_info <- hash(counts[, 1], counts[, 1])
for (i in 1:n) {
cat_info[[counts[i, 1]]] <- hash(c("out1", "out2"),
c(counts_wpercent[i, 2], counts_wpercent[i, 3]))
}
# tests of differences chi-square
chisq <- chisq.test(counts[, 2:3])
para_pval <- chisq$p.value
# can use $expected to check if we should use fisher's instead
# Fisher's exact test
fish <- fisher.test(counts[, 2:3])
nonpara_pval <- fish$p.value
return(c(cat_info, para_pval, nonpara_pval))
}
cat_fun(data=FEV, outcome="smoke", var="sex")
data<- FEV
outcome<- "smoke"
var<- "sex"
# 'counts' = contingency table; col2 is for outcome level 1, col3 is for outcome level 2
# `counts_wpercent` includes percents
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
digits<-2
# 'counts' = contingency table; col2 is for outcome level 1, col3 is for outcome level 2
# `counts_wpercent` includes percents
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
View(counts_wpercent)
# done a second time with just counts for testing 2x2 contingency table
counts <- data %>%
group_by(!!as.symbol(outcome), !!as.symbol(var)) %>%
tally() %>%
spread(!!as.symbol(outcome), n)
View(counts)
counts[, 2] <- as.numeric(counts[, 2])
counts[, 3] <- as.numeric(counts[, 3])
counts <- as.data.frame(counts)
counts[, 2] <- as.numeric(counts[, 2])
counts[, 3] <- as.numeric(counts[, 3])
View(counts)
# store info for output in later table this includes the levels of covariate and
# counts/percents for contingency table length of first column for number of levels
n <- length(counts[, 1])
# store counts/percent for each level in a dictionary with key equal to the level
cat_info <- hash(counts[, 1], counts[, 1])
View(cat_info)
for (i in 1:n) {
cat_info[[counts[i, 1]]] <- hash(c("out1", "out2"),
c(counts_wpercent[i, 2], counts_wpercent[i, 3]))
}
cat_info[[counts[i, 1]]]i<-1
i<-1
cat_info[[counts[i, 1]]]
cat_info[[counts[1, 1]]]
counts[1,1]
# store counts/percent for each level in a dictionary with key equal to the level
cat_info <- hash(unlist(lst(counts[, 1])), unlist(lst(counts[, 1])))
View(cat_info)
unlist(lst(counts[, 1]))
lst(counts[,1])
lst(counts[,1])[1]
unlist(lst(counts[,1]))[1]
# store counts/percent for each level in a dictionary with key equal to the level
cat_info <- hash(unlist(lst(counts[,1])), unlist(lst(counts[,1])))
View(cat_info)
cat_info
for (i in 1:n) {
cat_info[unlist(lst(counts[,1]))[i] <- hash(c("out1", "out2"),
c(counts_wpercent[i, 2], counts_wpercent[i, 3]))
}
for (i in 1:n) {
cat_info[unlist(lst(counts[,1]))[i] <- hash(c("out1", "out2"),
c(counts_wpercent[i, 2], counts_wpercent[i, 3]))
}
for (i in 1:n) {
cat_info[unlist(lst(counts[,1]))[i]] <- hash(c("out1", "out2"),
c(counts_wpercent[i, 2], counts_wpercent[i, 3]))
}
View(cat_info)
cat_fun <- function(data, outcome, var, digits = 2) {
# 'counts' = contingency table; col2 is for outcome level 1, col3 is for outcome level 2
# `counts_wpercent` includes percents
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
# done a second time with just counts for testing 2x2 contingency table
counts <- data %>%
group_by(!!as.symbol(outcome), !!as.symbol(var)) %>%
tally() %>%
spread(!!as.symbol(outcome), n)
counts <- as.data.frame(counts)
counts[, 2] <- as.numeric(counts[, 2])
counts[, 3] <- as.numeric(counts[, 3])
# store info for output in later table this includes the levels of covariate and
# counts/percents for contingency table length of first column for number of levels
n <- length(counts[, 1])
# store counts/percent for each level in a dictionary with key equal to the level
cat_info <- hash(unlist(lst(counts[,1])), unlist(lst(counts[,1])))
for (i in 1:n) {
cat_info[unlist(lst(counts[,1]))[i]] <- hash(c("out1", "out2"),
c(counts_wpercent[i, 2], counts_wpercent[i, 3]))
}
# tests of differences chi-square
chisq <- chisq.test(counts[, 2:3])
para_pval <- chisq$p.value
# can use $expected to check if we should use fisher's instead
# Fisher's exact test
fish <- fisher.test(counts[, 2:3])
nonpara_pval <- fish$p.value
return(c(cat_info, para_pval, nonpara_pval))
}
cat_fun(data=FEV, outcome="smoke", var="sex")
devtools::document()
devtools::document()
devtools::install(build_vignettes = TRUE)
cat_fun(data=FEV, outcome="smoke", var="sex")
cat_fun(data=FEV, outcome="smoke", var="sex")$female
cat_fun(data=FEV, outcome="smoke", var="sex")
cat_fun(data=FEV, outcome="smoke", var="sex")[[1]]
cat_fun(data=FEV, outcome="smoke", var="sex")[[1]]$female
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
data<-FEV
var <- "sex"
outcome<-"smoke"
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
digits<-2
counts_wpercent <- data %>%
group_by(!!as.symbol(var), !!as.symbol(outcome)) %>%
mutate(n = n()) %>%
group_by(!!as.symbol(outcome)) %>%
distinct(!!as.symbol(outcome), !!as.symbol(var), n) %>%
mutate(Per = n/sum(n), np = paste0(n, " (", round(Per * 100, digits), " %)")) %>%
select(-n, -Per) %>%
spread(!!as.symbol(outcome), np)
View(counts_wpercent)
cat_fun(data=FEV, outcome="smoke", var="sex")
devtools::test()
devtools::test()
devtools::test()
#example table with FEV data set
make_table(data=FEV,
outcome="smoke",
num_vec=c("age", "height", "fev"),
cat_vec="sex")
devtools::test()
#example table with FEV data set
k<-make_table(data=FEV,
outcome="smoke",
num_vec=c("age", "height", "fev"),
cat_vec="sex")
str(k)
k[,1]
devtools::check()
devtools::document()
devtools::install(build_vignettes=TRUE)
devtools::document()
devtools::install(build_vignettes=TRUE)
devtools::check()
devtools::check()
devtools::document()
devtools::install(build_vignettes=TRUE)
devtools::check()
devtools::document()
devtools::document()
devtools::install(build_vignettes=TRUE)
devtools::check()
devtools::document()
pkgload::dev_help('FEV')
devtools::document()
devtools::install(build_vignettes=TRUE)
devtools::check()
devtools::document()
devtools::install(build_vignettes=TRUE)
devtools::check()
devtools::build()
devtools::build()
devtools::install(build_vignettes = TRUE)
install_github("ChristineRakowski/Table1PKG")
?make_table
?numeric_fun
?make_table
?cat_fun
library(Table1PKG)
cat_fun(data=FEV, outcome="smoke", var="sex")
?FEV
head(FEV)
# sample categorical summary
cat_fun(data=FEV, var="sex", outcome="smoke")
# sample numerical summary
numeric_fun(data=FEV, var="age", outcome="smoke")
#example table with FEV data set
make_table(data=FEV,
outcome="smoke",
num_vec=c("age", "height", "fev"),
cat_vec="sex")
